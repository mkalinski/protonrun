#!/usr/bin/env bash
# Copyright (C) 2019,2020,2024  Michał Kaliński
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

declare PROTONRUN_STEAM_ROOT PROTONRUN_APP_ID
: ${PROTONRUN_STEAM_ROOT:=$HOME/.local/share/Steam}

declare -r steamapps_dir="$PROTONRUN_STEAM_ROOT/steamapps"
declare -r compatdata_dir="$steamapps_dir/compatdata"

usage() {
	echo 'Usage:'
	echo "  $0 [-s|--show] COMMAND [ARGUMENT...]"
	echo "  $0 -s|--show"
	echo "  $0 -l|--list"
	echo "  $0 -h|--help"
	echo
	echo 'Export WINE environment variables for a Steam Proton prefix'
	echo 'and run COMMAND [ARGUMENT...]'
	echo
	echo 'OPTIONS'
	echo '  -l, --list  print all detected steam apps, as `APP_ID "APP_NAME"`,'
	echo '              and exit'
	echo '  -s, --show  print exported variables, as `NAME=VALUE`,'
	echo '              before executing COMMAND [ARGUMENT...], if given'
	echo '  -h, --help  print this message and exit'
	echo
	echo 'ENVIRONMENT VARIABLES'
	echo '  PROTONRUN_STEAM_ROOT  root dir of Steam installation,'
	echo '                        defaults to `$HOME/.local/share/Steam`'
	echo '  PROTONRUN_APP_ID      ID of Steam app whose prefix to use,'
	echo '                        if not set then a prompt will be shown'
	echo '                        of all Steam apps'
}

echo_err() {
	echo "$0:" ERROR: "$@" >&2
}

die() {
	echo_err "$1"
	exit "${2:-1}"
}

die_on_bad_args() {
	echo_err "$1"
	usage
	exit 2
}

ensure_dir() {
	declare -r checked_dir="$1"

	if [[ ! -d $checked_dir ]]; then
		die "$checked_dir is not a directory"
	fi
}

list_apps() {
	ensure_dir "$compatdata_dir"
	declare app field_1 field_2

	for app in "$compatdata_dir"/*/; do
		if [[ ! -d $app ]]; then
			continue
		fi

		app="${app%/}"
		app="${app##*/}"

		while read -r field_1 field_2; do
			if [[ $field_1 == '"name"' ]]; then
				app+=" $field_2"
				break
			fi
		done < "$steamapps_dir/appmanifest_$app.acf"

		echo "$app"
	done
}

sorted_apps() {
	declare list
	list="$(list_apps)" || return

	if command -v sort > /dev/null; then
		sort -k 2 <<< "$list"
	fi
}

select_protonrun_app_id() {
	declare line selected_app proton_apps
	readarray -t proton_apps <<< "$(sorted_apps)" || return

	select selected_app in "${proton_apps[@]}"; do
		if [[ -n $selected_app ]]; then
			PROTONRUN_APP_ID="${selected_app%% *}"
			return
		fi
	done

	# If app not selected, then abort.
	return 1
}

get_proton_version() {
	declare -r proton_dir="$1"
	declare -r version_path="$proton_dir/version"

	declare line
	read -r line < "$version_path"

	if [[ -z $line ]]; then
		die "Could not read proton version from: $version_path"
	fi

	echo "${line%-*}"
}


if [[ $# -eq 0 ]]; then
	die_on_bad_args 'An argument is required'
fi

declare show_envs

case "$1" in
	(-h|--help)
		usage
		exit
		;;
	(-l|--list)
		sorted_apps
		exit
		;;
	(-s|--show)
		show_envs=1
		shift 1
		;;
	(-*)
		die_on_bad_args "Unknown option: $1"
		;;
esac

if [[ -z $PROTONRUN_APP_ID ]]; then
	select_protonrun_app_id

	if [[ -z $PROTONRUN_APP_ID ]]; then
		# User must have cancelled
		exit 0
	fi
fi

declare -r app_proton_dir="$PROTONRUN_STEAM_ROOT/steamapps/compatdata/$PROTONRUN_APP_ID"
ensure_dir "$app_proton_dir"

declare proton_version
proton_version="$(get_proton_version "$app_proton_dir")" || exit

declare -x PROTON="$steamapps_dir/common/Proton $proton_version"
declare -r proton_dist="$PROTON/dist"
ensure_dir "$proton_dist"

declare -x WINEPREFIX="$app_proton_dir/pfx"
ensure_dir "$WINEPREFIX"
declare -x WINESERVER="$proton_dist/bin/wineserver"
declare -x WINELOADER="$proton_dist/bin/wine"
declare -x WINEDLLPATH="$proton_dist/lib/wine:$proton_dist/lib64/wine"
declare -x PATH="$proton_dist/bin:$PATH"

if [[ -n $show_envs ]]; then
	echo "WINEPREFIX=$WINEPREFIX"
	echo "WINESERVER=$WINESERVER"
	echo "WINELOADER=$WINELOADER"
	echo "WINEDLLPATH=$WINEDLLPATH"
	echo "PATH=$PATH"
	echo "PROTON=$PROTON"
fi

exec "$@"
